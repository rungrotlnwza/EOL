// Delete Account Steps Logic
export function setupDeleteAccount() {
    console.log('üóëÔ∏è DeleteAccount: Initializing...');

    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ DOM ‡πÅ‡∏•‡∏∞ Bootstrap ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
    const initializeDeleteAccount = () => {
        const deleteStep1 = document.getElementById('delete-step1');
        const deleteStep2 = document.getElementById('delete-step2');
        const deleteStep3 = document.getElementById('delete-step3');
        const deleteToStep2Btn = document.getElementById('deleteToStep2Btn');
        const deleteToStep3Btn = document.getElementById('deleteToStep3Btn');
        const deleteBackToStep1Btn = document.getElementById('deleteBackToStep1Btn');
        const deleteBackToStep2Btn = document.getElementById('deleteBackToStep2Btn');
        const deleteAccountForm = document.getElementById('deleteAccountForm');
        const deleteStatusDiv = document.getElementById('deleteAccountStatus');
        const deleteStatusAlert = deleteStatusDiv ? deleteStatusDiv.querySelector('.alert') : null;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ elements ‡∏ñ‡∏π‡∏Å‡∏û‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (!deleteAccountForm || !deleteStep1 || !deleteStep2 || !deleteStep3) {
            console.warn('‚ùå DeleteAccount: Form elements not found, retrying...');
            console.log('Elements check:', {
                deleteAccountForm: !!deleteAccountForm,
                deleteStep1: !!deleteStep1,
                deleteStep2: !!deleteStep2,
                deleteStep3: !!deleteStep3
            });
            // ‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 200ms
            setTimeout(initializeDeleteAccount, 200);
            return;
        } else {
            console.log('‚úÖ DeleteAccount: All form elements found');
        }

        // üß† Utility: Set required only on visible fields
        function fixRequiredOnVisibleFields(form) {
            console.log('üîß DeleteAccount: Fixing required fields...');
            const allFields = form.querySelectorAll('input, select, textarea');
            console.log('Found fields:', allFields.length);

            allFields.forEach(field => {
                let el = field;
                let hidden = false;
                while (el && el !== form) {
                    if (el.classList.contains('d-none')) {
                        hidden = true;
                        break;
                    }
                    el = el.parentElement;
                }

                // ‡∏•‡∏ö required ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏Å‡πà‡∏≠‡∏ô
                field.required = false;

                // ‡πÄ‡∏û‡∏¥‡πà‡∏° required ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
                if (!hidden && (field.id === 'delete-password' || field.id === 'delete-otp' || field.id === 'delete-confirm')) {
                    field.required = true;
                    console.log(`‚úÖ Setting required: ${field.id} (visible: ${!hidden})`);
                } else {
                    console.log(`‚ö™ Removing required: ${field.id} (visible: ${!hidden})`);
                }
            });
        }

        function showStep(currentStep, nextStep) {
            console.log(`üîÑ DeleteAccount: Changing step from ${currentStep.id} to ${nextStep.id}`);

            // ‡∏ã‡πà‡∏≠‡∏ô step ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            currentStep.classList.add('d-none');

            // ‡πÅ‡∏™‡∏î‡∏á step ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            nextStep.classList.remove('d-none');

            // ‡∏ã‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° status
            if (deleteStatusDiv) {
                deleteStatusDiv.classList.add('d-none');
            }

            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï required fields
            fixRequiredOnVisibleFields(deleteAccountForm);

            console.log(`‚úÖ Step changed successfully`);
        }

        function goToDeleteStep2() {
            console.log('üöÄ DeleteAccount: Attempting to go to Step 2');

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            const passwordField = document.getElementById('delete-password');
            const password = passwordField ? passwordField.value.trim() : '';

            console.log('Password field found:', !!passwordField);
            console.log('Password length:', password.length);

            if (!password) {
                console.warn('‚ùå DeleteAccount: Password is empty');
                if (deleteStatusAlert) {
                    deleteStatusAlert.className = 'alert alert-warning';
                    deleteStatusAlert.textContent = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô';
                    deleteStatusDiv.classList.remove('d-none');
                }
                return;
            }

            console.log('‚úÖ DeleteAccount: Password validated, moving to step 2');
            showStep(deleteStep1, deleteStep2);

            const otpField = document.getElementById('delete-otp');
            if (otpField) {
                otpField.focus();
            }
        }

        function goToDeleteStep3() {
            console.log('üöÄ DeleteAccount: Attempting to go to Step 3');
            fixRequiredOnVisibleFields(deleteAccountForm);
            const otp = document.getElementById('delete-otp').value.trim();
            console.log('OTP entered:', otp);
            if (otp !== '123456') {
                console.warn('‚ùå DeleteAccount: Invalid OTP');
                deleteStatusAlert.className = 'alert alert-danger';
                deleteStatusAlert.textContent = 'OTP ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å 123456)';
                deleteStatusDiv.classList.remove('d-none');
                return;
            }
            console.log('‚úÖ DeleteAccount: OTP validated, moving to step 3');
            showStep(deleteStep2, deleteStep3);
            const confirmField = document.getElementById('delete-confirm');
            if (confirmField) {
                confirmField.focus();
            }
        }

        function backToStep1() {
            showStep(deleteStep2, deleteStep1);
            document.getElementById('delete-password').focus();
        }

        function backToStep2() {
            showStep(deleteStep3, deleteStep2);
            document.getElementById('delete-otp').focus();
        }

        // üéØ Event bindings
        if (deleteToStep2Btn) {
            console.log('‚úÖ DeleteAccount: Binding Step 2 button event');
            deleteToStep2Btn.addEventListener('click', function (e) {
                e.preventDefault();
                e.stopPropagation();
                console.log('üñ±Ô∏è DeleteAccount: Step 2 button clicked');
                goToDeleteStep2();
            });
        } else {
            console.warn('‚ùå DeleteAccount: Step 2 button not found');
        }

        if (deleteToStep3Btn) {
            deleteToStep3Btn.addEventListener('click', function (e) {
                e.preventDefault();
                console.log('üñ±Ô∏è DeleteAccount: Step 3 button clicked');
                goToDeleteStep3();
            });
        }

        if (deleteBackToStep1Btn) {
            deleteBackToStep1Btn.addEventListener('click', function (e) {
                e.preventDefault();
                backToStep1();
            });
        }

        if (deleteBackToStep2Btn) {
            deleteBackToStep2Btn.addEventListener('click', function (e) {
                e.preventDefault();
                backToStep2();
            });
        }

        // Enter key navigation
        const passwordField = document.getElementById('delete-password');
        const otpField = document.getElementById('delete-otp');

        if (passwordField) {
            passwordField.addEventListener('keydown', function (e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    console.log('‚å®Ô∏è DeleteAccount: Enter pressed in password field');
                    goToDeleteStep2();
                }
            });
        }

        if (otpField) {
            otpField.addEventListener('keydown', function (e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    console.log('‚å®Ô∏è DeleteAccount: Enter pressed in OTP field');
                    goToDeleteStep3();
                }
            });
        }

        // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£ submit ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
        deleteAccountForm.addEventListener('submit', async function (e) {
            e.preventDefault();
            console.log('üìã DeleteAccount: Form submit intercepted');

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (deleteStep3.classList.contains('d-none')) {
                console.log('‚ö†Ô∏è DeleteAccount: Not in final step, ignoring submit');
                return;
            }

            console.log('üö® DeleteAccount: Final submit triggered');
            fixRequiredOnVisibleFields(deleteAccountForm);

            const password = document.getElementById('delete-password').value.trim();
            const confirm = document.getElementById('delete-confirm').checked;

            if (!confirm) {
                deleteStatusAlert.className = 'alert alert-warning';
                deleteStatusAlert.textContent = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ';
                deleteStatusDiv.classList.remove('d-none');
                return;
            }

            const token = localStorage.getItem('token');
            if (!token) {
                deleteStatusAlert.className = 'alert alert-danger';
                deleteStatusAlert.textContent = '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ó‡πÄ‡∏Ñ‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà';
                deleteStatusDiv.classList.remove('d-none');
                return;
            }

            try {
                const response = await fetch('/api/deleteAccount', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer ' + token
                    },
                    body: JSON.stringify({ password })
                });

                const result = await response.json();

                if (response.ok) {
                    deleteStatusAlert.className = 'alert alert-success';
                    deleteStatusAlert.textContent = result.message || '‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à';
                    localStorage.removeItem('token');
                    setTimeout(() => window.location.href = '/public/login', 2000);
                } else {
                    deleteStatusAlert.className = 'alert alert-danger';
                    deleteStatusAlert.textContent = result.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ';
                }

                deleteStatusDiv.classList.remove('d-none');
            } catch (err) {
                deleteStatusAlert.className = 'alert alert-danger';
                deleteStatusAlert.textContent = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå';
                deleteStatusDiv.classList.remove('d-none');
            }
        });

        // üîÅ Initialize
        console.log('üîÅ DeleteAccount: Initializing form...');
        fixRequiredOnVisibleFields(deleteAccountForm);
    };

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeDeleteAccount);
    } else {
        // DOM ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß ‡∏£‡∏≠‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏£‡∏¥‡πà‡∏°
        setTimeout(initializeDeleteAccount, 100);
    }
}
